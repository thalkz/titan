// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: protos/combat.proto

package combat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CombatClient is the client API for Combat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CombatClient interface {
	Fight(ctx context.Context, opts ...grpc.CallOption) (Combat_FightClient, error)
}

type combatClient struct {
	cc grpc.ClientConnInterface
}

func NewCombatClient(cc grpc.ClientConnInterface) CombatClient {
	return &combatClient{cc}
}

func (c *combatClient) Fight(ctx context.Context, opts ...grpc.CallOption) (Combat_FightClient, error) {
	stream, err := c.cc.NewStream(ctx, &Combat_ServiceDesc.Streams[0], "/Combat/Fight", opts...)
	if err != nil {
		return nil, err
	}
	x := &combatFightClient{stream}
	return x, nil
}

type Combat_FightClient interface {
	Send(*PlayerAction) error
	Recv() (*CombatState, error)
	grpc.ClientStream
}

type combatFightClient struct {
	grpc.ClientStream
}

func (x *combatFightClient) Send(m *PlayerAction) error {
	return x.ClientStream.SendMsg(m)
}

func (x *combatFightClient) Recv() (*CombatState, error) {
	m := new(CombatState)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CombatServer is the server API for Combat service.
// All implementations must embed UnimplementedCombatServer
// for forward compatibility
type CombatServer interface {
	Fight(Combat_FightServer) error
	mustEmbedUnimplementedCombatServer()
}

// UnimplementedCombatServer must be embedded to have forward compatible implementations.
type UnimplementedCombatServer struct {
}

func (UnimplementedCombatServer) Fight(Combat_FightServer) error {
	return status.Errorf(codes.Unimplemented, "method Fight not implemented")
}
func (UnimplementedCombatServer) mustEmbedUnimplementedCombatServer() {}

// UnsafeCombatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CombatServer will
// result in compilation errors.
type UnsafeCombatServer interface {
	mustEmbedUnimplementedCombatServer()
}

func RegisterCombatServer(s grpc.ServiceRegistrar, srv CombatServer) {
	s.RegisterService(&Combat_ServiceDesc, srv)
}

func _Combat_Fight_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CombatServer).Fight(&combatFightServer{stream})
}

type Combat_FightServer interface {
	Send(*CombatState) error
	Recv() (*PlayerAction, error)
	grpc.ServerStream
}

type combatFightServer struct {
	grpc.ServerStream
}

func (x *combatFightServer) Send(m *CombatState) error {
	return x.ServerStream.SendMsg(m)
}

func (x *combatFightServer) Recv() (*PlayerAction, error) {
	m := new(PlayerAction)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Combat_ServiceDesc is the grpc.ServiceDesc for Combat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Combat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Combat",
	HandlerType: (*CombatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Fight",
			Handler:       _Combat_Fight_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/combat.proto",
}
